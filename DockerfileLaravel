#PARA CONSTRUIRLO EJECUTAR
#docker build -t nombre_imagen .
#Este git es para multistage
FROM alpine/git:latest
RUN git clone https://github.com/sergioarmgpl/sitioweb.git
COPY sitioweb /tmp
#Imagen en la que se basa el container

FROM ubuntu:18.04
MAINTAINER CloudNativePlusGT
#Evitar interacción de consola cuando se ejecuta
ENV DEBIAN_FRONTEND noninteractive
#RUN ejecuta comandos dentro del container
RUN apt-get update
RUN apt-get install -y apache2
RUN apt-get install -y php libapache2-mod-php php-mysql
RUN apt-get install -y php-dev php-bcmath php-json php-json-schema php-mbstring openssl php-tokenizer php-xml php-zip unzip
RUN php -r "copy('https://getcomposer.org/installer', 'composer-setup.php');"
#RUN php -r "if (hash_file('sha384', 'composer-setup.php') === '106d3d32cc30011325228b9272424c1941ad75207cb5244bee161e5f9906b0edf07ab2a733e8a1c945173eb9b1966197') { echo 'Installer verified'; } else { echo 'Installer corrupt'; unlink('composer-setup.php'); } echo PHP_EOL;"
RUN php composer-setup.php
RUN php -r "unlink('composer-setup.php');"
#RUN php composer-setup.php --install-dir=bin --filename=composer
RUN mv composer.phar /usr/local/bin/composer
RUN rm /var/www/html/*
#Los archivos se guardan en el WORKDIR en este caso se configura cual va a ser
WORKDIR /var/www/html
#SE INSTALA LARAVEL Y LA CARPETA DEFECTO DE TRABAJO ES /var/www/html
RUN composer global require laravel/installer
RUN echo "export PATH=/root/.composer/vendor/bin:$PATH" >> /root/.bashrc
RUN sed -i "s/\$process->setTty(true);/\/\/\$process->setTty(true);/g" /root/.composer/vendor/laravel/installer/src/NewCommand.php
#OPCION 1 crea un nuevo proyecto
#RUN /root/.composer/vendor/bin/laravel new --force proyecto
#WORKDIR /var/www/html/proyecto
#OPCION 2 bajo un proyecto ya hecho
#1.clonar y se pega en /var/www/html crea la carpeta sitioweb con su contenido adentro
#RUN git clone https://github.com/sergioarmgpl/sitioweb.git
RUN mv /tmp/sitioweb/* .
#RUN mv sitioweb/* .
#EJECUTA LARAVEL
CMD php artisan serve --host 0.0.0.0 --port 80
#OPCION 3 agregar carpeta en el origen de este docker file
#ADD agrega una carpeta que esta dentro del mismo lugar del Dockerfile dentro del la imagen
#COPY copia carpetas existentes dentro del mismo container
#ADD carpeta .
#RUN mv carpeta/* .
#CMD php artisan serve --host 0.0.0.0 --port 80
#OPCION 4
#DESCOMENTAR ESTO SI ES UNA PAGINA NORMAL EN HTML O PHP
#CMD ["/usr/sbin/apache2ctl", "-D", "FOREGROUND"]
#EXPONE EL PUERTO 80
#CMD es el comando con el que se crea el container por defecto al ejecutar run
#CMD debe de colocarse un comando que quede en primer plano para que al darle run
#no muera el container inmediatamente al ejecutar docker run si así se desea 
EXPOSE 80
#PARA CREAR EL CONTAINER EJECUTAR sudo docker run -it -d -p 80:80 nombre_imagen:tag
#el nombre es el que se puse en el -t del docker build 